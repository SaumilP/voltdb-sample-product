<?xml version="1.0"?>
<deployment>
   <cluster hostcount="1"
            sitesperhost="2"
            kfactor="0"
   />
   <!--
	Directories for storing snapshots, export overflow and other files generated by VoltDB
	-->
	<paths>
		<exportoverflow path="/Users/saumilpatel/databases/voltdb-4.0.2.3/sample/snapshots/export"/>
		<snapshots path="/Users/saumilpatel/databases/voltdb-4.0.2.3/sample/snapshots"/>
		<voltdbroot path="/Users/saumilpatel/databases/voltdb-4.0.2.3/sample/root"/>
	</paths>

	<!--
	Enable web console and REST API to interact with VoltDB. Apart from, JDBC driver and Java client
	VoltDB can be accessed using JSON based REST API to execute queries
	-->
	<httpd enabled="true">
		<jsonapi enabled="true" />
	</httpd>

	<!--
	VoltDB is in memory database and provides durability by writing data to file on regular interval.
	Also, before shutdown database should be paused and saved to ensure all data written to disk and
	on startup should be restored.
	This configuration will save snapshots to path configured in <paths> on every 5 minutes and will
	keep 3 recent snapshots.
	Snapshots saves all data in tables excepts tables marked with export only.
	-->
	<snapshot prefix="sample" frequency="5m" retain="3"/>

	<!--
	This configuration is for enabling export functionality and use export-to-file export client to
	write exported data to file. There are other export client available like JDBC client to write data
	directly to other database and Hadoop client to export data to Hadoop. One can write custom export
	client as per need.

	Export is for integrating VoltDb with other system. To export data we need to create tables marked
	as export only. All insert to export only tables go to a queue and export client fetch from queue,
	hence incremental export. On overflow of queue, data is written to disk to location specified in
	<paths>

	Enabing skipinternals option will remove transaction id, partition id, timestamp created like data
	frm export and will export only data in table.
	-->
</deployment>
